<template>
  <div class="admin-page">
    <header class="admin-header">
      <h1>Data Administration</h1>
      <p class="subtitle">Manage project phases, team members, and settings</p>
      
      <div class="action-bar">
        <button class="btn btn-primary" @click="saveData" :disabled="isSaving || isLoading">
          <span class="icon">ðŸ’¾</span> {{ isSaving ? 'Saving...' : 'Save Changes' }}
        </button>
        <button class="btn btn-secondary" @click="resetData" :disabled="isSaving || isLoading">
          <span class="icon">â†º</span> Reset Changes
        </button>
        <button class="btn btn-secondary" @click="openRawJsonEditor">
          <span class="icon">{ }</span> Edit Raw JSON
        </button>
        <div v-if="statusMessage" class="status-message">{{ statusMessage }}</div>
      </div>
    </header>

    <div v-if="isLoading" class="loading-container">
      <div class="loading-spinner"></div>
      <p>Loading data...</p>
    </div>

    <div v-else class="content-container">
      <div class="tabs">
        <button 
          v-for="tab in tabs" 
          :key="tab.id" 
          @click="activeTab = tab.id" 
          :class="['tab', { 'active': activeTab === tab.id }]"
        >
          {{ tab.name }}
        </button>
      </div>

      <!-- Phases Tab -->
      <div v-if="activeTab === 'phases'" class="tab-content">
        <div class="header-with-actions">
          <h2>Phases</h2>
          <button class="btn btn-add" @click="addPhase">+ Add Phase</button>
        </div>
        
        <div class="phase-list">
          <div v-for="(phase, phaseIndex) in jsonData.phases" :key="phaseIndex" class="phase-card">
            <div class="phase-card-header" @click="toggleAccordion('phase', phaseIndex)">
              <h3>Phase {{ phase.number }}: {{ phase.displayName }}</h3>
              <div class="card-actions">
                <button class="btn-icon" @click.stop="openModal('phase', phaseIndex)">âœŽ</button>
                <span class="expand-icon">{{ expandedItems.phase[phaseIndex] ? 'â–¼' : 'â–º' }}</span>
              </div>
            </div>
            
            <div v-if="expandedItems.phase[phaseIndex]" class="phase-card-content">
              <div class="phase-info">
                <div class="form-row">
                  <div class="form-group">
                    <label>Number</label>
                    <div class="edit-field-wrapper">
                      <input type="number" v-model.number="phase.number" class="form-control" />
                      <button class="field-edit-btn" @click="editField('number', phase.number, 'number', 'Phase Number', phaseIndex, 'phases')">âœŽ</button>
                    </div>
                  </div>
                  
                  <div class="form-group">
                    <label>Name</label>
                    <div class="edit-field-wrapper">
                      <input type="text" v-model="phase.name" class="form-control" />
                      <button class="field-edit-btn" @click="editField('name', phase.name, 'text', 'Phase Name', phaseIndex, 'phases')">âœŽ</button>
                    </div>
                  </div>
                  
                  <div class="form-group">
                    <label>Display</label>
                    <div class="edit-field-wrapper">
                      <input type="text" v-model="phase.displayName" class="form-control" />
                      <button class="field-edit-btn" @click="editField('displayName', phase.displayName, 'text', 'Display Name', phaseIndex, 'phases')">âœŽ</button>
                    </div>
                  </div>
                  
                  <div class="form-group">
                    <label class="checkbox-label">
                      <input type="checkbox" v-model="phase.enabled" />
                      <span>Enabled</span>
                      <button class="field-edit-btn" @click="editField('enabled', phase.enabled, 'boolean', 'Enabled Status', phaseIndex, 'phases')">âœŽ</button>
                    </label>
                  </div>
                </div>
              </div>
              
              <!-- Core Deliverables section -->
              <div class="section">
                <div class="section-header">
                  <h4>Core Deliverables</h4>
                  <div>
                    <button class="btn btn-sm" @click="openModal('deliverable', phaseIndex)">+ Add</button>
                    <button class="btn-icon" @click="editField('default_enabled', phase.core_deliverables?.default_enabled || [], 'array', 'Core Deliverables', phaseIndex, 'phases', 'core_deliverables')">âœŽ</button>
                  </div>
                </div>
                
                <div class="card-grid">
                  <div 
                    v-for="(item, index) in phase.core_deliverables?.default_enabled" 
                    :key="'enabled-'+index" 
                    class="data-card"
                  >
                    <div class="data-card-content">{{ item }}</div>
                    <div class="data-card-actions">
                      <button class="btn-icon" @click="editField('default_enabled['+index+']', item, 'text', 'Deliverable', phaseIndex, 'phases', 'core_deliverables')">âœŽ</button>
                      <button class="btn-icon btn-icon-danger" @click="removeArrayItem(phase.core_deliverables.default_enabled, index)">âœ•</button>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Rounds section -->
              <div class="section">
                <div class="section-header">
                  <h4>Rounds</h4>
                  <div>
                    <button class="btn btn-sm" @click="addRound(phase)">+ Add Round</button>
                    <button class="btn-icon" @click="editField('rounds', phase.rounds, 'object', 'Rounds', phaseIndex, 'phases')">âœŽ</button>
                  </div>
                </div>
                
                <div class="card-grid">
                  <div 
                    v-for="(round, roundKey) in phase.rounds" 
                    :key="roundKey" 
                    class="round-card"
                  >
                    <div class="round-card-header" @click="toggleAccordion('round', phaseIndex + '-' + roundKey)">
                      <h5>{{ roundKey }}: {{ round.name }}</h5>
                      <div class="card-actions">
                        <button class="btn-icon" @click.stop="editField(roundKey, round, 'object', `Round ${roundKey}`, phaseIndex, 'phases', 'rounds')">âœŽ</button>
                        <span class="expand-icon">{{ expandedItems.round[phaseIndex + '-' + roundKey] ? 'â–¼' : 'â–º' }}</span>
                      </div>
                    </div>
                    
                    <div v-if="expandedItems.round[phaseIndex + '-' + roundKey]" class="round-card-content">
                      <div class="form-row">
                        <div class="form-group">
                          <label>Duration (days)</label>
                          <div class="edit-field-wrapper">
                            <input type="number" v-model.number="round.duration_days" class="form-control" />
                            <button class="field-edit-btn" @click.stop="editField('duration_days', round.duration_days, 'number', 'Duration Days', phaseIndex, 'phases', `rounds.${roundKey}`)">âœŽ</button>
                          </div>
                        </div>
                        <div class="form-group">
                          <label>Start Date</label>
                          <div class="edit-field-wrapper">
                            <input type="date" v-model="round.start_date" class="form-control" />
                            <button class="field-edit-btn" @click.stop="editField('start_date', round.start_date, 'date', 'Start Date', phaseIndex, 'phases', `rounds.${roundKey}`)">âœŽ</button>
                          </div>
                        </div>
                      </div>
                      
                      <div class="tag-section">
                        <h6>Deliverables</h6>
                        <button class="field-edit-btn" @click.stop="editField('deliverables', round.deliverables, 'array', 'Round Deliverables', phaseIndex, 'phases', `rounds.${roundKey}`)">âœŽ</button>
                        <div class="tag-container">
                          <div v-for="(item, index) in round.deliverables" :key="'del-'+index" class="tag">
                            <span>{{ item }}</span>
                            <button class="tag-remove" @click="removeArrayItem(round.deliverables, index)">âœ•</button>
                          </div>
                          <button class="btn btn-sm" @click="addArrayItem(round.deliverables, '')">+ Add</button>
                        </div>
                      </div>
                      
                      <div class="tag-section">
                        <h6>Tasks</h6>
                        <button class="field-edit-btn" @click.stop="editField('tasks', round.tasks, 'array', 'Round Tasks', phaseIndex, 'phases', `rounds.${roundKey}`)">âœŽ</button>
                        <div class="tag-container">
                          <div v-for="(item, index) in round.tasks" :key="'task-'+index" class="tag">
                            <span>{{ item }}</span>
                            <button class="tag-remove" @click="removeArrayItem(round.tasks, index)">âœ•</button>
                          </div>
                          <button class="btn btn-sm" @click="addArrayItem(round.tasks, '')">+ Add</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Stakeholders section -->
              <div class="section">
                <div class="section-header">
                  <h4>Stakeholders</h4>
                  <button class="btn-icon" @click="editField('stakeholders', phase.stakeholders, 'array', 'Stakeholders', phaseIndex, 'phases')">âœŽ</button>
                </div>
                
                <div class="tag-container">
                  <div v-for="(item, index) in phase.stakeholders" :key="'stake-'+index" class="tag">
                    <span>{{ item }}</span>
                    <button class="tag-remove" @click="removeArrayItem(phase.stakeholders, index)">âœ•</button>
                  </div>
                  <button class="btn btn-sm" @click="addArrayItem(phase.stakeholders, '')">+ Add</button>
                </div>
              </div>
              
              <button class="btn btn-danger" @click="removePhase(phaseIndex)">Delete Phase</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Team Tab -->
      <div v-if="activeTab === 'team'" class="tab-content">
        <h2>Creative Team</h2>
        
        <div class="team-grid">
          <!-- Leadership section -->
          <div class="team-section">
            <div class="section-header">
              <h3>Leadership</h3>
              <div>
                <button class="btn btn-sm" @click="openModal('leadership-member', -1)">+ Add</button>
                <button class="btn-icon" @click="editField('leadership', jsonData.creativeTeam.leadership, 'array', 'Leadership Team', 0, 'creativeTeam')">âœŽ</button>
              </div>
            </div>
            
            <div class="card-grid">
              <div 
                v-for="(member, index) in jsonData.creativeTeam.leadership" 
                :key="'lead-'+index" 
                class="member-card"
              >
                <div class="member-info">
                  <h4>{{ member.name }}</h4>
                  <p>{{ member.role }}</p>
                  <p class="rate">{{ member.day_rate }} / day</p>
                </div>
                <div class="card-actions">
                  <button class="btn-icon" @click="editField('leadership['+index+']', member, 'object', 'Team Member', index, 'creativeTeam', 'leadership')">âœŽ</button>
                  <button class="btn-icon btn-icon-danger" @click="removeArrayItem(jsonData.creativeTeam.leadership, index)">âœ•</button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Designers section -->
          <div class="team-section">
            <div class="section-header">
              <h3>Designers</h3>
              <div>
                <button class="btn btn-sm" @click="openModal('team-member', 'designers')">+ Add</button>
                <button class="btn-icon" @click="editField('designers', jsonData.creativeTeam.designers, 'array', 'Design Team', 0, 'creativeTeam')">âœŽ</button>
              </div>
            </div>
            
            <div class="card-grid">
              <div 
                v-for="(member, index) in jsonData.creativeTeam.designers" 
                :key="'design-'+index" 
                class="member-card"
              >
                <div class="member-info">
                  <h4>{{ member.name }}</h4>
                  <p>{{ member.role }}</p>
                  <p class="rate">{{ member.day_rate }} / day</p>
                </div>
                <div class="card-actions">
                  <button class="btn-icon" @click="editField('designers['+index+']', member, 'object', 'Designer', index, 'creativeTeam', 'designers')">âœŽ</button>
                  <button class="btn-icon btn-icon-danger" @click="removeArrayItem(jsonData.creativeTeam.designers, index)">âœ•</button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Production section -->
          <div class="team-section">
            <div class="section-header">
              <h3>Production</h3>
              <div>
                <button class="btn btn-sm" @click="openModal('team-member', 'production')">+ Add</button>
                <button class="btn-icon" @click="editField('production', jsonData.creativeTeam.production, 'array', 'Production Team', 0, 'creativeTeam')">âœŽ</button>
              </div>
            </div>
            
            <div class="card-grid">
              <div 
                v-for="(member, index) in jsonData.creativeTeam.production" 
                :key="'prod-'+index" 
                class="member-card"
              >
                <div class="member-info">
                  <h4>{{ member.name }}</h4>
                  <p>{{ member.role }}</p>
                  <p class="rate">{{ member.day_rate }} / day</p>
                </div>
                <div class="card-actions">
                  <button class="btn-icon" @click="editField('production['+index+']', member, 'object', 'Production Member', index, 'creativeTeam', 'production')">âœŽ</button>
                  <button class="btn-icon btn-icon-danger" @click="removeArrayItem(jsonData.creativeTeam.production, index)">âœ•</button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Creatives section -->
          <div class="team-section">
            <div class="section-header">
              <h3>Creatives</h3>
              <div>
                <button class="btn btn-sm" @click="openModal('team-member', 'creatives')">+ Add</button>
                <button class="btn-icon" @click="editField('creatives', jsonData.creativeTeam.creatives, 'array', 'Creative Team', 0, 'creativeTeam')">âœŽ</button>
              </div>
            </div>
            
            <div class="card-grid">
              <div 
                v-for="(member, index) in jsonData.creativeTeam.creatives" 
                :key="'creative-'+index" 
                class="member-card"
              >
                <div class="member-info">
                  <h4>{{ member.name }}</h4>
                  <p>{{ member.role }}</p>
                  <p class="rate">{{ member.day_rate }} / day</p>
                </div>
                <div class="card-actions">
                  <button class="btn-icon" @click="editField('creatives['+index+']', member, 'object', 'Creative', index, 'creativeTeam', 'creatives')">âœŽ</button>
                  <button class="btn-icon btn-icon-danger" @click="removeArrayItem(jsonData.creativeTeam.creatives, index)">âœ•</button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Stakeholders section -->
          <div class="team-section">
            <div class="section-header">
              <h3>Stakeholders</h3>
              <button class="btn-icon" @click="editField('stakeholders', jsonData.creativeTeam.stakeholders, 'array', 'Team Stakeholders', 0, 'creativeTeam')">âœŽ</button>
            </div>
            
            <div class="card-grid">
              <div 
                v-for="(member, index) in jsonData.creativeTeam.stakeholders" 
                :key="'stake-'+index" 
                class="member-card"
              >
                <div class="member-info">
                  <h4>{{ member.name }}</h4>
                  <p>{{ member.role }}</p>
                </div>
                <div class="card-actions">
                  <button class="btn-icon" @click="editField('stakeholders['+index+']', member, 'object', 'Stakeholder', index, 'creativeTeam', 'stakeholders')">âœŽ</button>
                  <button class="btn-icon btn-icon-danger" @click="removeArrayItem(jsonData.creativeTeam.stakeholders, index)">âœ•</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, onMounted } from 'vue'

export default {
  name: 'AdminPage',
  setup() {
    const jsonData = ref({})
    const originalData = ref({})
    const activeTab = ref('phases')
    const expandedItems = reactive({
      phase: {},
      round: {}
    })
    const isLoading = ref(false)
    const isSaving = ref(false)
    const statusMessage = ref('')
    const openAiKey = ref('')
    
    // Modal state
    const showModal = ref(false)
    const modalType = ref('')
    const modalId = ref(null)
    const modalText = ref('')
    const modalTitle = ref('')
    const modalPlaceholder = ref('')
    const currentItem = ref({}) // For form-based modals
    const currentModal = ref(null)
    const tempFormData = ref({})
    const modalData = ref(null)
    
    const tabs = [
      { id: 'phases', name: 'Phases' },
      { id: 'team', name: 'Creative Team' }
    ]
    
    onMounted(async () => {
      await loadData()
      openAiKey.value = localStorage.getItem('openai_api_key') || ''
    })
    
    const loadData = async () => {
      try {
        isLoading.value = true
        statusMessage.value = 'Loading data...'
        
        // Try first to load from the API
        try {
          const response = await fetch('http://localhost:3001/api/data')
          const data = await response.json()
          jsonData.value = data
          originalData.value = JSON.parse(JSON.stringify(data)) // Deep copy for reset functionality
          statusMessage.value = 'Data loaded from API'
        } catch (apiError) {
          console.warn('API not available, loading from static file:', apiError)
          
          // Fallback to local file if API is not available
          const response = await fetch('/src/data/data.json')
          const data = await response.json()
          jsonData.value = data
          originalData.value = JSON.parse(JSON.stringify(data))
          statusMessage.value = 'Data loaded from static file (API not available)'
        }
      } catch (error) {
        console.error('Error loading data:', error)
        statusMessage.value = 'Error loading data: ' + error.message
      } finally {
        isLoading.value = false
        setTimeout(() => {
          statusMessage.value = ''
        }, 3000)
      }
    }
    
    const toggleAccordion = (type, id) => {
      expandedItems[type][id] = !expandedItems[type][id]
    }
    
    const addArrayItem = (array, defaultValue) => {
      array.push(defaultValue)
    }
    
    const removeArrayItem = (array, index) => {
      array.splice(index, 1)
    }
    
    const addPhase = () => {
      const newPhaseNumber = jsonData.value.phases.length > 0 
        ? Math.max(...jsonData.value.phases.map(p => p.number)) + 1 
        : 1
        
      jsonData.value.phases.push({
        number: newPhaseNumber,
        name: `New Phase ${newPhaseNumber}`,
        displayName: `New Phase ${newPhaseNumber}`,
        enabled: true,
        core_deliverables: {
          default_enabled: []
        },
        rounds: {
          R1: {
            name: "Pre Production",
            duration_days: 5,
            deliverables: [],
            tasks: [],
            team: [],
            start_date: new Date().toISOString().split('T')[0],
            events: []
          }
        },
        stakeholders: []
      })
    }
    
    const removePhase = (index) => {
      if (confirm('Are you sure you want to delete this phase?')) {
        jsonData.value.phases.splice(index, 1)
      }
    }
    
    const addRound = (phase) => {
      // Find next round number
      const roundKeys = Object.keys(phase.rounds)
      const lastRound = roundKeys[roundKeys.length - 1]
      const nextRoundNumber = parseInt(lastRound.substring(1)) + 1
      
      phase.rounds[`R${nextRoundNumber}`] = {
        name: "New Round",
        duration_days: 5,
        deliverables: [],
        tasks: [],
        team: [],
        start_date: new Date().toISOString().split('T')[0],
        events: []
      }
    }
    
    const addEvent = (round) => {
      round.events.push({
        date: new Date().toISOString().split('T')[0],
        type: "start",
        description: "New Event",
        deliverables: [],
        team_members: []
      })
    }
    
    // Enhanced modal functionality
    const openModal = (type, data = null) => {
      currentModal.value = type
      tempFormData.value = {}
      modalData.value = data
      
      if (type === 'phase' && data) {
        // Clone the phase data to avoid directly modifying it
        tempFormData.value = JSON.parse(JSON.stringify(jsonData.value.phases[data]))
      } else if (type === 'team-member') {
        if (typeof data === 'string') {
          // Adding new team member
          tempFormData.value = { name: '', role: '', day_rate: 0 }
          modalData.value = { section: data }
        } else if (data && data.index !== undefined) {
          // Editing existing team member
          const section = data.section
          const index = data.index
          tempFormData.value = JSON.parse(JSON.stringify(jsonData.value.creativeTeam[section][index]))
        }
      } else {
        modalType.value = 'form'
        modalId.value = data
        
        if (type === 'phase') {
          const phase = data !== -1 ? { ...jsonData.value.phases[data] } : {
            number: jsonData.value.phases.length > 0 
              ? Math.max(...jsonData.value.phases.map(p => p.number)) + 1 
              : 1,
            name: '',
            displayName: '',
            enabled: true
          }
          currentItem.value = { ...phase, formType: 'phase' }
          modalTitle.value = data !== -1 ? `Edit Phase ${phase.number}` : 'Add New Phase'
        }
        else if (type === 'round') {
          // For individual rounds - ID is phaseIndex-roundKey
          if (typeof data === 'string' && data.includes('-')) {
            const [phaseIndex, roundKey] = data.split('-')
            const round = { ...jsonData.value.phases[phaseIndex].rounds[roundKey] }
            currentItem.value = { ...round, formType: 'round', phaseIndex, roundKey }
            modalTitle.value = `Edit Round ${roundKey}`
          } else {
            // Adding a new round directly
            currentItem.value = {
              formType: 'round',
              name: 'New Round',
              duration_days: 5,
              start_date: new Date().toISOString().split('T')[0],
              deliverables: [],
              tasks: [],
              team: [],
              events: [],
              phaseIndex: data
            }
            modalTitle.value = 'Add New Round'
          }
        }
        else if (type === 'deliverable') {
          if (data !== -1 && typeof data.subIndex !== 'undefined') {
            // Edit existing deliverable
            const deliverable = { ...jsonData.value.phases[data.phaseIndex].core_deliverables.default_enabled[data.subIndex] }
            currentItem.value = { 
              formType: 'deliverable',
              name: deliverable,
              description: '',
              phaseIndex: data.phaseIndex,
              subIndex: data.subIndex
            }
            modalTitle.value = 'Edit Deliverable'
          } else {
            // Add new deliverable
            currentItem.value = {
              formType: 'deliverable',
              name: '',
              description: '',
              phaseIndex: data
            }
            modalTitle.value = 'Add New Deliverable'
          }
        }
        else if (type === 'stakeholder') {
          if (data !== -1 && typeof data === 'object') {
            // Edit existing stakeholder
            const stakeholder = jsonData.value.creativeTeam.stakeholders[data.index]
            currentItem.value = {
              formType: 'stakeholder',
              name: stakeholder.name,
              role: stakeholder.role,
              company: stakeholder.company || '',
              index: data.index
            }
            modalTitle.value = 'Edit Stakeholder'
          } else {
            // Add new stakeholder
            currentItem.value = {
              formType: 'stakeholder',
              name: '',
              role: '',
              company: ''
            }
            modalTitle.value = 'Add New Stakeholder'
          }
        }
        else if (type === 'leadership-member') {
          if (data !== -1) {
            // Edit existing leadership member
            const member = jsonData.value.creativeTeam.leadership[data]
            currentItem.value = {
              formType: 'leadership',
              name: member.name,
              role: member.role,
              email: member.email || '',
              day_rate: member.day_rate || 0,
              index: data
            }
            modalTitle.value = 'Edit Leadership Member'
          } else {
            // Add new leadership member
            currentItem.value = {
              formType: 'leadership',
              name: '',
              role: '',
              email: '',
              day_rate: 0
            }
            modalTitle.value = 'Add New Leadership Member'
          }
        }
        else if (type === 'team-member') {
          if (data !== -1 && typeof data === 'object') {
            // Edit existing team member
            const section = data.section
            const member = jsonData.value.creativeTeam[section][data.index]
            currentItem.value = {
              formType: 'team',
              name: member.name,
              role: member.role,
              day_rate: member.day_rate || 0,
              section,
              index: data.index
            }
            modalTitle.value = `Edit ${section.charAt(0).toUpperCase() + section.slice(1)} Member`
          } else {
            // Add new team member
            currentItem.value = {
              formType: 'team',
              name: '',
              role: '',
              day_rate: 0,
              section: data
            }
            modalTitle.value = `Add New ${data.charAt(0).toUpperCase() + data.slice(1)} Member`
          }
        }
        else if (type === 'event') {
          if (data !== -1 && typeof data === 'object') {
            // Edit existing event
            const event = jsonData.value.phases[data.phaseIndex].rounds[data.roundKey].events[data.eventIndex]
            currentItem.value = {
              formType: 'event',
              date: event.date,
              type: event.type,
              description: event.description,
              deliverables: [...event.deliverables],
              team_members: [...event.team_members],
              stakeholders: event.stakeholders ? [...event.stakeholders] : [],
              phaseIndex: data.phaseIndex,
              roundKey: data.roundKey,
              eventIndex: data.eventIndex
            }
            modalTitle.value = 'Edit Event'
          } else {
            // Add new event - id should contain phaseIndex and roundKey
            currentItem.value = {
              formType: 'event',
              date: new Date().toISOString().split('T')[0],
              type: 'start',
              description: 'New Event',
              deliverables: [],
              team_members: [],
              stakeholders: [],
              phaseIndex: data.phaseIndex,
              roundKey: data.roundKey
            }
            modalTitle.value = 'Add New Event'
          }
        }
      }
      
      showModal.value = true
    }
    
    const closeModal = () => {
      showModal.value = false
      modalType.value = ''
      modalId.value = null
      modalText.value = ''
      currentItem.value = {}
      currentModal.value = null
      tempFormData.value = {}
      modalData.value = null
    }
    
    const saveModalChanges = () => {
      // Handle form-based modal saves
      if (modalType.value === 'form') {
        const item = currentItem.value
        
        if (item.formType === 'phase') {
          if (modalId.value !== -1) {
            // Update existing phase
            const phase = jsonData.value.phases[modalId.value]
            phase.number = item.number
            phase.name = item.name
            phase.displayName = item.displayName
            phase.enabled = item.enabled
          } else {
            // Add new phase
            jsonData.value.phases.push({
              number: item.number,
              name: item.name,
              displayName: item.displayName,
              enabled: item.enabled,
              core_deliverables: {
                default_enabled: []
              },
              rounds: {
                R1: {
                  name: "Pre Production",
                  duration_days: 5,
                  deliverables: [],
                  tasks: [],
                  team: [],
                  start_date: new Date().toISOString().split('T')[0],
                  events: []
                }
              },
              stakeholders: []
            })
          }
        }
        else if (item.formType === 'round') {
          if (typeof modalId.value === 'string' && modalId.value.includes('-')) {
            // Update existing round
            const [phaseIndex, roundKey] = modalId.value.split('-')
            const round = jsonData.value.phases[phaseIndex].rounds[roundKey]
            round.name = item.name
            round.duration_days = item.duration_days
            round.start_date = item.start_date
          } else if (item.phaseIndex !== undefined) {
            // Add new round directly
            const phase = jsonData.value.phases[item.phaseIndex]
            // Find next round number
            const roundKeys = Object.keys(phase.rounds)
            const lastRound = roundKeys[roundKeys.length - 1]
            const nextRoundNumber = parseInt(lastRound.substring(1)) + 1
            
            phase.rounds[`R${nextRoundNumber}`] = {
              name: item.name,
              duration_days: item.duration_days,
              start_date: item.start_date,
              deliverables: [],
              tasks: [],
              team: [],
              events: []
            }
          }
        }
        else if (item.formType === 'deliverable') {
          if (item.subIndex !== undefined) {
            // Update existing deliverable
            jsonData.value.phases[item.phaseIndex].core_deliverables.default_enabled[item.subIndex] = item.name
          } else {
            // Add new deliverable
            const phase = jsonData.value.phases[item.phaseIndex]
            if (!phase.core_deliverables) {
              phase.core_deliverables = { default_enabled: [] }
            }
            if (!phase.core_deliverables.default_enabled) {
              phase.core_deliverables.default_enabled = []
            }
            phase.core_deliverables.default_enabled.push(item.name)
          }
        }
        else if (item.formType === 'stakeholder') {
          if (item.index !== undefined) {
            // Update existing stakeholder
            const stakeholder = jsonData.value.creativeTeam.stakeholders[item.index]
            stakeholder.name = item.name
            stakeholder.role = item.role
            stakeholder.company = item.company
          } else {
            // Add new stakeholder
            jsonData.value.creativeTeam.stakeholders.push({
              name: item.name,
              role: item.role,
              company: item.company
            })
          }
        }
        else if (item.formType === 'leadership') {
          if (item.index !== undefined) {
            // Update existing leadership member
            const member = jsonData.value.creativeTeam.leadership[item.index]
            member.name = item.name
            member.role = item.role
            member.email = item.email
            member.day_rate = item.day_rate
          } else {
            // Add new leadership member
            jsonData.value.creativeTeam.leadership.push({
              name: item.name,
              role: item.role,
              email: item.email,
              day_rate: item.day_rate
            })
          }
        }
        else if (item.formType === 'team') {
          if (item.index !== undefined) {
            // Update existing team member
            const member = jsonData.value.creativeTeam[item.section][item.index]
            member.name = item.name
            member.role = item.role
            member.day_rate = item.day_rate
          } else {
            // Add new team member
            jsonData.value.creativeTeam[item.section].push({
              name: item.name,
              role: item.role,
              day_rate: item.day_rate
            })
          }
        }
        else if (item.formType === 'event') {
          if (item.eventIndex !== undefined) {
            // Update existing event
            const event = jsonData.value.phases[item.phaseIndex].rounds[item.roundKey].events[item.eventIndex]
            event.date = item.date
            event.type = item.type
            event.description = item.description
            event.deliverables = item.deliverables
            event.team_members = item.team_members
            event.stakeholders = item.stakeholders
          } else {
            // Add new event
            jsonData.value.phases[item.phaseIndex].rounds[item.roundKey].events.push({
              date: item.date,
              type: item.type,
              description: item.description,
              deliverables: item.deliverables || [],
              team_members: item.team_members || [],
              stakeholders: item.stakeholders || []
            })
          }
        }
      }
      // Handle text-based modal saves (legacy)
      else {
        const lines = modalText.value.split('\n').filter(line => line.trim() !== '')
        
        if (modalType.value === 'phase') {
          const phase = jsonData.value.phases[modalId.value]
          if (lines.length > 0) phase.name = lines[0]
          if (lines.length > 1) phase.displayName = lines[1]
        }
        else if (modalType.value === 'deliverables') {
          const phase = jsonData.value.phases[modalId.value]
          if (!phase.core_deliverables) {
            phase.core_deliverables = { default_enabled: [] }
          }
          if (!phase.core_deliverables.default_enabled) {
            phase.core_deliverables.default_enabled = []
          }
          phase.core_deliverables.default_enabled = lines
        }
        else if (modalType.value === 'rounds') {
          const phase = jsonData.value.phases[modalId.value]
          const newRounds = {}
          
          lines.forEach(line => {
            const match = line.match(/^([^:]+):\s*(.+)$/)
            if (match) {
              const [, key, name] = match
              // Preserve existing round data if possible
              if (phase.rounds[key.trim()]) {
                newRounds[key.trim()] = { ...phase.rounds[key.trim()], name: name.trim() }
              } else {
                newRounds[key.trim()] = {
                  name: name.trim(),
                  duration_days: 5,
                  deliverables: [],
                  tasks: [],
                  team: [],
                  start_date: new Date().toISOString().split('T')[0],
                  events: []
                }
              }
            }
          })
          
          // Only update if we have valid data
          if (Object.keys(newRounds).length > 0) {
            phase.rounds = newRounds
          }
        }
        else if (modalType.value === 'round') {
          // For individual rounds
          const [phaseIndex, roundKey] = modalId.value.split('-')
          if (lines.length > 0) {
            jsonData.value.phases[phaseIndex].rounds[roundKey].name = lines[0]
          }
        }
        else if (modalType.value === 'stakeholders') {
          const phase = jsonData.value.phases[modalId.value]
          phase.stakeholders = lines
        }
        else if (modalType.value === 'leadership' || modalType.value === 'designers' || 
                 modalType.value === 'production' || modalType.value === 'creatives') {
          const team = []
          lines.forEach(line => {
            const parts = line.split(',').map(part => part.trim())
            if (parts.length >= 3) {
              team.push({
                name: parts[0],
                role: parts[1],
                day_rate: parseInt(parts[2]) || 0
              })
            }
          })
          if (team.length > 0) {
            jsonData.value.creativeTeam[modalType.value] = team
          }
        }
        else if (modalType.value === 'teamStakeholders') {
          const stakeholders = []
          lines.forEach(line => {
            const parts = line.split(',').map(part => part.trim())
            if (parts.length >= 2) {
              stakeholders.push({
                name: parts[0],
                role: parts[1]
              })
            }
          })
          if (stakeholders.length > 0) {
            jsonData.value.creativeTeam.stakeholders = stakeholders
          }
        }
      }
      
      closeModal()
    }
    
    const saveFormData = (type) => {
      if (type === 'team-member') {
        const section = modalData.value.section
        if (modalData.value.index !== undefined) {
          // Update existing team member
          jsonData.value.creativeTeam[section][modalData.value.index] = tempFormData.value
        } else {
          // Add new team member
          jsonData.value.creativeTeam[section].push(tempFormData.value)
        }
      }
      // ... existing code ...
      closeModal()
    }
    
    const saveData = async () => {
      try {
        isSaving.value = true
        statusMessage.value = 'Saving data...'
        
        // Try to save using the API
        try {
          const response = await fetch('http://localhost:3001/api/data', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonData.value)
          })
          
          const result = await response.json()
          
          if (result.success) {
            statusMessage.value = 'Data saved successfully!'
            // Update originalData for reset functionality
            originalData.value = JSON.parse(JSON.stringify(jsonData.value))
          } else {
            throw new Error(result.error || 'Failed to save data')
          }
        } catch (apiError) {
          console.warn('API not available for saving:', apiError)
          statusMessage.value = 'Changes saved in memory only. API not available for permanent storage.'
          
          // Update originalData for in-memory reset functionality
          originalData.value = JSON.parse(JSON.stringify(jsonData.value))
        }
      } catch (error) {
        console.error('Error saving data:', error)
        statusMessage.value = 'Error saving data: ' + error.message
      } finally {
        isSaving.value = false
        setTimeout(() => {
          if (statusMessage.value.includes('success') || statusMessage.value.includes('memory only')) {
            statusMessage.value = ''
          }
        }, 3000)
      }
    }
    
    const resetData = () => {
      if (confirm('This will reset all changes. Continue?')) {
        jsonData.value = JSON.parse(JSON.stringify(originalData.value))
        statusMessage.value = 'Data reset to last saved state'
        setTimeout(() => {
          statusMessage.value = ''
        }, 3000)
      }
    }

    // Raw JSON editor functionality
    const showRawJsonEditor = ref(false)
    const rawJsonText = ref('')
    const jsonError = ref('')

    const formatJson = () => {
      try {
        const formattedJson = JSON.stringify(JSON.parse(rawJsonText.value), null, 2)
        rawJsonText.value = formattedJson
        jsonError.value = ''
      } catch (error) {
        jsonError.value = 'Invalid JSON format'
      }
    }

    const validateJson = () => {
      try {
        JSON.parse(rawJsonText.value)
        jsonError.value = ''
      } catch (error) {
        jsonError.value = 'Invalid JSON format'
      }
    }

    const saveRawJson = () => {
      try {
        const parsedJson = JSON.parse(rawJsonText.value)
        jsonData.value = parsedJson
        statusMessage.value = 'Raw JSON saved successfully!'
        showRawJsonEditor.value = false
      } catch (error) {
        jsonError.value = 'Error saving raw JSON'
      }
    }

    const closeRawJsonEditor = () => {
      showRawJsonEditor.value = false
      rawJsonText.value = ''
      jsonError.value = ''
    }

    const openRawJsonEditor = () => {
      showRawJsonEditor.value = true
      rawJsonText.value = JSON.stringify(jsonData.value, null, 2)
      jsonError.value = ''
    }

    // Field editor functionality
    const fieldEditor = ref({
      show: false,
      title: '',
      label: '',
      value: '',
      type: '',
      options: [],
      valueType: '',
      jsonView: false,
      jsonText: '',
      jsonError: '',
      aiPrompt: '',
      aiError: '',
      isAiProcessing: false
    })

    const formatLabel = (key) => {
      return key.charAt(0).toUpperCase() + key.slice(1)
    }

    const getInputType = (value) => {
      if (typeof value === 'string') return 'text'
      if (typeof value === 'number') return 'number'
      if (typeof value === 'boolean') return 'checkbox'
      if (value instanceof Date) return 'date'
      if (Array.isArray(value)) return 'array'
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) return 'object'
      return 'text'
    }

    const removeItem = (index) => {
      fieldEditor.value.value.splice(index, 1)
      // Also update the JSON text to keep them in sync
      fieldEditor.value.jsonText = JSON.stringify(fieldEditor.value.value, null, 2)
    }

    const addFieldEditorItem = () => {
      const defaultValue = fieldEditor.value.valueType === 'object' ? {} : ''
      fieldEditor.value.value.push(defaultValue)
      // Also update the JSON text to keep them in sync
      fieldEditor.value.jsonText = JSON.stringify(fieldEditor.value.value, null, 2)
    }

    const editNestedObject = (key, value) => {
      // Clone the object to avoid reference issues
      fieldEditor.value.value = JSON.parse(JSON.stringify(value))
      // Update the JSON text to reflect the new focus
      fieldEditor.value.jsonText = JSON.stringify(fieldEditor.value.value, null, 2)
    }

    const editNestedArray = (key, value) => {
      // Clone the array to avoid reference issues
      fieldEditor.value.value = JSON.parse(JSON.stringify(value))
      // Update the JSON text to reflect the new focus
      fieldEditor.value.jsonText = JSON.stringify(fieldEditor.value.value, null, 2)
    }

    const saveFieldEditor = () => {
      try {
        // If in JSON view, parse the JSON text and update the value
        if (fieldEditor.value.jsonView) {
          fieldEditor.value.value = JSON.parse(fieldEditor.value.jsonText)
        }
        
        const { path, value } = fieldEditor.value
        const { field, index, section, parent } = path
        
        if (parent) {
          // Handle nested fields
          if (section === 'phases') {
            if (parent === 'core_deliverables') {
              jsonData.value.phases[index].core_deliverables[field] = value
            } else if (parent.startsWith('rounds.')) {
              const roundKey = parent.split('.')[1]
              jsonData.value.phases[index].rounds[roundKey][field] = value
            }
          } else if (section === 'creativeTeam') {
            jsonData.value.creativeTeam[parent][index][field] = value
          }
        } else {
          // Handle top-level fields
          if (section === 'phases') {
            jsonData.value.phases[index][field] = value
          } else if (section === 'creativeTeam') {
            jsonData.value.creativeTeam[field] = value
          }
        }
        
        statusMessage.value = 'Field updated successfully!'
        setTimeout(() => {
          statusMessage.value = ''
        }, 2000)
        
        closeFieldEditor()
      } catch (error) {
        fieldEditor.value.jsonError = `Error saving: ${error.message}`
      }
    }

    const closeFieldEditor = () => {
      fieldEditor.value.show = false
      fieldEditor.value.value = ''
    }

    const editField = (field, value, type, label, index, section, parent = null) => {
      const jsonValue = JSON.parse(JSON.stringify(value)) // Deep clone to avoid direct reference
      fieldEditor.value = {
        show: true,
        title: `Edit ${label}`,
        label,
        value: jsonValue,
        type,
        path: { field, index, section, parent },
        valueType: Array.isArray(value) ? (value.length > 0 ? typeof value[0] : 'string') : typeof value,
        jsonView: false, // Start with form view by default
        jsonText: JSON.stringify(jsonValue, null, 2),
        jsonError: ''
      }
    }

    const toggleFieldEditorView = () => {
      fieldEditor.value.jsonView = !fieldEditor.value.jsonView
    }

    const formatFieldJson = () => {
      try {
        const formattedJson = JSON.stringify(JSON.parse(fieldEditor.value.jsonText), null, 2)
        fieldEditor.value.jsonText = formattedJson
        fieldEditor.value.jsonError = ''
      } catch (error) {
        fieldEditor.value.jsonError = 'Invalid JSON format'
      }
    }

    const validateFieldJson = () => {
      try {
        JSON.parse(fieldEditor.value.jsonText)
        fieldEditor.value.jsonError = ''
      } catch (error) {
        fieldEditor.value.jsonError = 'Invalid JSON format'
      }
    }

    // Function to get OpenAI API key
    const getOpenAiKey = () => {
      if (!openAiKey.value) {
        openAiKey.value = promptForApiKey()
      }
      return openAiKey.value
    }

    const applyAiEdit = async () => {
      if (!fieldEditor.value.aiPrompt.trim()) {
        fieldEditor.value.aiError = 'Please enter a prompt'
        return
      }
      
      // Check for API key first
      const apiKey = getOpenAiKey()
      if (!apiKey) {
        fieldEditor.value.aiError = 'OpenAI API key is required'
        return
      }
      
      try {
        fieldEditor.value.isAiProcessing = true
        fieldEditor.value.aiError = ''
        
        // Get the current data to edit
        const dataToEdit = fieldEditor.value.jsonView 
          ? fieldEditor.value.jsonText 
          : JSON.stringify(fieldEditor.value.value, null, 2)
        
        // Prepare the API request
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${getOpenAiKey()}` // You'll need to implement this function
          },
          body: JSON.stringify({
            model: 'gpt-4',
            messages: [
              {
                role: 'system',
                content: `You are an AI assistant that helps edit JSON data. 
                You will receive a JSON string and a prompt. 
                Your task is to modify the JSON based on the prompt and return ONLY the modified JSON.
                Do not include any explanation or other text - just return valid JSON that can be parsed.`
              },
              {
                role: 'user',
                content: `Please edit this data: ${dataToEdit}\n\nInstructions: ${fieldEditor.value.aiPrompt}`
              }
            ],
            temperature: 0.7
          })
        })
        
        if (!response.ok) {
          throw new Error(`API error: ${response.status}`)
        }
        
        const result = await response.json()
        const editedJson = result.choices[0].message.content.trim()
        
        try {
          // Try to parse the response to verify it's valid JSON
          const parsedResult = JSON.parse(editedJson)
          
          // Update the field editor with the result
          if (fieldEditor.value.jsonView) {
            fieldEditor.value.jsonText = JSON.stringify(parsedResult, null, 2)
          } else {
            fieldEditor.value.value = parsedResult
            fieldEditor.value.jsonText = JSON.stringify(parsedResult, null, 2)
          }
          
          // Show success message
          statusMessage.value = 'AI edits applied successfully!'
          setTimeout(() => { statusMessage.value = '' }, 2000)
          
        } catch (jsonError) {
          fieldEditor.value.aiError = 'AI returned invalid JSON. Please try again with a different prompt.'
        }
      } catch (error) {
        fieldEditor.value.aiError = `Error: ${error.message}`
      } finally {
        fieldEditor.value.isAiProcessing = false
      }
    }

    // Add a function to prompt the user for their OpenAI API key if not found
    const promptForApiKey = () => {
      const storedKey = localStorage.getItem('openai_api_key')
      
      if (!storedKey) {
        const apiKey = prompt('Please enter your OpenAI API key to enable AI editing:')
        if (apiKey) {
          localStorage.setItem('openai_api_key', apiKey)
          return apiKey
        }
      }
      
      return storedKey
    }

    return {
      jsonData,
      activeTab,
      tabs,
      expandedItems,
      isLoading,
      isSaving,
      statusMessage,
      showModal,
      modalType,
      modalText,
      modalTitle,
      modalPlaceholder,
      currentItem,
      currentModal,
      tempFormData,
      modalData,
      toggleAccordion,
      addArrayItem,
      removeArrayItem,
      addPhase,
      removePhase,
      addRound,
      addEvent,
      openModal,
      closeModal,
      saveModalChanges,
      saveData,
      resetData,
      saveFormData,
      showRawJsonEditor,
      rawJsonText,
      jsonError,
      formatJson,
      validateJson,
      saveRawJson,
      closeRawJsonEditor,
      openRawJsonEditor,
      fieldEditor,
      formatLabel,
      getInputType,
      removeItem,
      addFieldEditorItem,
      editNestedObject,
      editNestedArray,
      saveFieldEditor,
      closeFieldEditor,
      editField,
      toggleFieldEditorView,
      formatFieldJson,
      validateFieldJson,
      applyAiEdit,
      promptForApiKey
    }
  }
}
</script>

<style>
:root {
  --primary: #4361ee;
  --primary-light: #4895ef;
  --primary-dark: #3f37c9;
  --success: #4cc9f0;
  --danger: #f72585;
  --warning: #f77f00;
  --dark-bg: #0a0a0b;
  --card-bg: #18181b;
  --input-bg: #27272a;
  --border-color: #3f3f46;
  --text-primary: #f1f5f9;
  --text-secondary: #94a3b8;
  --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --radius: 8px;
  --transition: all 0.2s ease;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.admin-page {
  min-height: 100vh;
  padding: 0;
  color: var(--text-primary);
  background-color: var(--dark-bg);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.admin-header {
  padding: 1.5rem 2rem;
  background-color: var(--card-bg);
  border-bottom: 1px solid var(--border-color);
}

.admin-header h1 {
  font-size: 1.75rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.subtitle {
  font-size: 0.95rem;
  color: var(--text-secondary);
  margin-bottom: 1.5rem;
}

.action-bar {
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.tabs {
  display: flex;
  background-color: var(--card-bg);
  padding: 0 2rem;
  border-bottom: 1px solid var(--border-color);
}

.tab {
  padding: 1rem 1.5rem;
  font-size: 1rem;
  font-weight: 500;
  color: var(--text-secondary);
  background: transparent;
  border: none;
  cursor: pointer;
  position: relative;
  transition: var(--transition);
}

.tab:hover {
  color: var(--text-primary);
}

.tab.active {
  color: var(--primary-light);
}

.tab.active::after {
  content: '';
  position: absolute;
  bottom: -1px;
  left: 0;
  width: 100%;
  height: 2px;
  background-color: var(--primary-light);
}

.content-container {
  max-width: 100%;
}

.tab-content {
  padding: 2rem;
}

.header-with-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.header-with-actions h2 {
  font-size: 1.5rem;
  font-weight: 600;
}

.phase-list {
  display: grid;
  gap: 1.5rem;
}

.phase-card {
  background-color: var(--card-bg);
  border-radius: var(--radius);
  border: 1px solid var(--border-color);
  overflow: hidden;
  box-shadow: var(--shadow);
}

.phase-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.25rem;
  background: linear-gradient(to right, var(--primary-dark), var(--primary));
  color: white;
  cursor: pointer;
  transition: var(--transition);
}

.phase-card-header:hover {
  background: linear-gradient(to right, var(--primary), var(--primary-light));
}

.phase-card-header h3 {
  font-size: 1.125rem;
  font-weight: 600;
  margin: 0;
}

.card-actions {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.expand-icon {
  font-size: 0.875rem;
  transition: transform 0.2s ease;
}

.phase-card-content {
  padding: 1.5rem;
}

.phase-info {
  margin-bottom: 1.5rem;
  padding-bottom: 1.5rem;
  border-bottom: 1px solid var(--border-color);
}

.form-row {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--text-secondary);
}

.form-control {
  width: 100%;
  padding: 0.625rem 0.75rem;
  font-size: 0.95rem;
  border: 1px solid var(--border-color);
  border-radius: var(--radius);
  background-color: var(--input-bg);
  color: var(--text-primary);
  transition: var(--transition);
}

.form-control:focus {
  outline: none;
  border-color: var(--primary-light);
  box-shadow: 0 0 0 3px rgba(72, 149, 239, 0.25);
}

.checkbox-label {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.checkbox-label input {
  margin-right: 0.5rem;
}

.section {
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--border-color);
}

.section:last-child {
  border-bottom: none;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.section-header h3, .section-header h4 {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 1rem;
}

.data-card {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.875rem 1rem;
  background-color: var(--input-bg);
  border-radius: var(--radius);
  border: 1px solid var(--border-color);
  transition: var(--transition);
}

.data-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.data-card-content {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.data-card-actions {
  display: flex;
  gap: 0.5rem;
}

.round-card {
  background-color: var(--input-bg);
  border-radius: var(--radius);
  border: 1px solid var(--border-color);
  overflow: hidden;
  transition: var(--transition);
}

.round-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.round-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  background-color: rgba(72, 149, 239, 0.1);
  cursor: pointer;
  transition: var(--transition);
}

.round-card-header:hover {
  background-color: rgba(72, 149, 239, 0.15);
}

.round-card-header h5 {
  font-size: 1rem;
  font-weight: 500;
  margin: 0;
}

.round-card-content {
  padding: 1rem;
}

.tag-section {
  margin-bottom: 1rem;
}

.tag-section h6 {
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--text-secondary);
  margin-bottom: 0.5rem;
}

.tag-container {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  align-items: center;
}

.tag {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0.5rem;
  background-color: rgba(72, 149, 239, 0.1);
  border-radius: 4px;
  font-size: 0.875rem;
}

.tag-remove {
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  font-size: 0.75rem;
}

.tag-remove:hover {
  color: var(--danger);
}

.team-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
}

.team-section {
  margin-bottom: 1.5rem;
}

.member-card {
  display: flex;
  justify-content: space-between;
  padding: 1rem;
  background-color: var(--input-bg);
  border-radius: var(--radius);
  border: 1px solid var(--border-color);
  transition: var(--transition);
}

.member-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.member-info h4 {
  font-size: 1rem;
  font-weight: 600;
  margin: 0 0 0.25rem 0;
}

.member-info p {
  font-size: 0.875rem;
  color: var(--text-secondary);
  margin: 0;
}

.member-info .rate {
  font-weight: 500;
  color: var(--success);
}

/* Button styles */
.btn {
  padding: 0.625rem 1rem;
  font-size: 0.95rem;
  border-radius: var(--radius);
  border: none;
  cursor: pointer;
  font-weight: 500;
  transition: var(--transition);
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.btn-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

.btn-primary {
  background-color: var(--primary);
  color: white;
}

.btn-primary:hover {
  background-color: var(--primary-dark);
  transform: translateY(-1px);
}

.btn-secondary {
  background-color: var(--input-bg);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
}

.btn-secondary:hover {
  background-color: var(--card-bg);
}

.btn-add {
  background-color: var(--success);
  color: white;
}

.btn-add:hover {
  background-color: #3db8dd;
  transform: translateY(-1px);
}

.btn-danger {
  background-color: var(--danger);
  color: white;
  margin-top: 1rem;
}

.btn-danger:hover {
  background-color: #e1146e;
}

.btn-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  background-color: var(--input-bg);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  cursor: pointer;
  transition: var(--transition);
}

.btn-icon:hover {
  background-color: var(--primary);
  color: white;
  transform: translateY(-1px);
}

.btn-icon-danger:hover {
  background-color: var(--danger);
}

.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 300px;
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid var(--border-color);
  border-radius: 50%;
  border-top-color: var(--primary);
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.status-message {
  padding: 0.5rem 1rem;
  background-color: var(--input-bg);
  border-radius: var(--radius);
  font-size: 0.875rem;
}

/* Modal styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 100;
  animation: fadeIn 0.2s ease;
  backdrop-filter: blur(4px);
}

.modal-container {
  background-color: var(--card-bg);
  border-radius: var(--radius);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  width: 95%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
  animation: slideIn 0.3s ease;
  border: 1px solid var(--border-color);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.25rem 1.5rem;
  border-bottom: 1px solid var(--border-color);
  background: linear-gradient(to right, var(--primary-dark), var(--primary));
  color: white;
}

.modal-header h4 {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 0;
}

.close-button {
  background: none;
  border: none;
  font-size: 1.25rem;
  color: white;
  cursor: pointer;
  opacity: 0.8;
  transition: opacity 0.2s ease;
}

.close-button:hover {
  opacity: 1;
}

.modal-body {
  padding: 1.5rem;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding: 1.25rem 1.5rem;
  border-top: 1px solid var(--border-color);
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { transform: translateY(20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@media (max-width: 768px) {
  .admin-header {
    padding: 1rem;
  }
  
  .tab-content {
    padding: 1rem;
  }
  
  .form-row, .card-grid, .team-grid {
    grid-template-columns: 1fr;
  }
}

/* JSON Editor Styles */
.raw-json-editor {
  max-width: 900px;
  width: 90%;
}

.json-editor {
  width: 100%;
  min-height: 400px;
  font-family: monospace;
  padding: 0.75rem;
  background-color: var(--input-bg);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
  border-radius: var(--radius);
  resize: vertical;
  font-size: 14px;
  line-height: 1.5;
  tab-size: 2;
}

.json-editor:focus {
  outline: none;
  border-color: var(--primary-light);
  box-shadow: 0 0 0 3px rgba(72, 149, 239, 0.25);
}

.json-editor-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

.json-error {
  color: var(--danger);
  font-size: 0.875rem;
}

/* Field Editor Styles */
.array-editor {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.modal-header-actions {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.view-toggle-btn {
  background-color: rgba(255, 255, 255, 0.2);
  color: white;
  border: none;
  padding: 0.375rem 0.75rem;
  border-radius: var(--radius);
  font-size: 0.875rem;
  cursor: pointer;
  transition: var(--transition);
}

.view-toggle-btn:hover {
  background-color: rgba(255, 255, 255, 0.3);
}

.field-json-editor {
  min-height: 200px;
}

.json-view-editor {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.array-item-editor {
  border: 1px solid var(--border-color);
  border-radius: var(--radius);
  padding: 1rem;
  background-color: rgba(0, 0, 0, 0.1);
}

.object-editor {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  width: 100%;
}

.flex-grow {
  flex-grow: 1;
  flex-basis: 0;
}

/* Field edit buttons */
.field-edit-btn {
  width: 1.5rem;
  height: 1.5rem;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  background-color: var(--input-bg);
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
  font-size: 0.75rem;
  cursor: pointer;
  transition: var(--transition);
}

.field-edit-btn:hover {
  background-color: var(--primary);
  color: white;
}

.edit-field-wrapper {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.edit-field-wrapper .form-control {
  flex: 1;
}

.ai-edit-panel {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
}

.ai-edit-input {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.ai-edit-input .form-control {
  flex: 1;
}

.ai-edit-btn {
  background-color: var(--primary);
  color: white;
  border: none;
  border-radius: var(--radius);
  padding: 0.375rem 0.75rem;
  cursor: pointer;
  transition: var(--transition);
}

.ai-edit-btn:hover {
  background-color: var(--primary-dark);
}

.spinner {
  width: 1rem;
  height: 1rem;
  border: 2px solid white;
  border-top-color: transparent;
  border-radius: 50%;
  animation: spin 0.75s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.ai-error {
  color: var(--danger);
  font-size: 0.875rem;
}
</style>
</div>
</template> 